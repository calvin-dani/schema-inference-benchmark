import static java.util.concurrent.TimeUnit.SECONDS

plugins {
    id 'java'
    id 'utils'
}

group 'cz.cuni.mff.dsi.nosql.s13e'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.2'

}

task installAngularCli(type: Exec) {
    commandLine getNpmExecutable(), 'install', '-g', '@angular/cli'
}

task installTypescript(type: Exec) {
    commandLine getNpmExecutable(), 'install', '-g', 'typescript'
}

task installDependencies {
    dependsOn installAngularCli
    dependsOn installTypescript
}

task install(type: Exec) {
    dependsOn installDependencies

    commandLine getNpmExecutable(), 'install'
}

task start {
    // dependsOn install

    doLast {
        [getNpmExecutable(), 'run', 'dev'].execute()
    }
}

task run(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'cz.cuni.mff.dsi.nosql.s13e.frozza.RunInference'
    systemProperties utils.propertiesForProject
}

task stop {
    doLast {
        if (isWindows()) {
            ['taskkill', '/f', '/im', 'node.exe'].execute()
        } else {
            ['pkill', '-u', "node"]
        }
    }
}

static def isWindows() {
    System.getProperty('os.name').toLowerCase().contains('win')
}

static def getNpmExecutable() {
    isWindows() ? 'npm.cmd' : 'npm'
}

static def npmExists() {
    try {
        def process = [getNpmExecutable(), 'version'].execute()
        process.waitFor(5, SECONDS)
        return process.exitValue() == 0
    } catch (IOException | IllegalThreadStateException ignored) {
        return false
    }
}

tasks.all {
    onlyIf {
        if (npmExists()) {
            return true
        }
        System.err.println("Skipping task $name, npm was not found! Make sure you have both node.js and npm installed and accessible on PATH.")
        return false
    }
}
